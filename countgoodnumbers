could come up with this after idea mine but asked chatgpt to write code

class Solution {
public:
    int countGoodNumbers(long long n) {
        int count;
        int start=pow(10,n-1);
        int end=pow(10,n)-1;

        bool isPrime(int d) {
    return d == 2 || d == 3 || d == 5 || d == 7;
        }


        for(int num=start;num<=end;num++)
        {
            string s= to_string(num);
            bool valid=true;
            for(int i=0;i<s.length();i++)
            {
                int digit=s[i]-'0';
                if(i%2==0)
                {
                    if(digit%2!=0)
                    {
                        valid=false;
                        break;
                    }
                }
                else
                {
                    if(!isPrime(digit))
                    {
                        valid=false;
                        break;
                    }
                }
                if(valid)count++;
            }
        }
         return count;
    }
   
};

but not yet correct

int start = pow(10, n - 1);  // ❌ Overflow for large `n`
| Line                        | Issue                                                                                                           | Fix                                                    |
| --------------------------- | --------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------ |
| `int count;`                | Not initialized → **garbage value**                                                                             | `int count = 0;`                                       |
| `isPrime` inside function   | C++ doesn't support nested functions                                                                            | Move `isPrime` **outside the method**                  |
| `if(valid) count++;`        | This line is **inside the for-loop over digits** — so it checks after **each digit**, not after **each number** | Move it **outside inner loop**                         |
| `pow(10, n)` with large `n` | May cause overflow or inaccuracy                                                                                | Not an issue unless `n > 9`, but beware for larger `n` |



class Solution {
public:
    int mod = 1e9 + 7;

    long long modPow(long long base, long long exp) {
        long long result = 1;
        while (exp > 0) {
            if (exp % 2 == 1)
                result = (result * base) % mod;
            base = (base * base) % mod;
            exp /= 2;
        }
        return result;
    }

    int countGoodNumbers(long long n) {
        long long even_positions = (n + 1) / 2;
        long long odd_positions = n / 2;

        long long evenWays = modPow(5, even_positions); // Even index → 5 options
        long long oddWays = modPow(4, odd_positions);   // Odd index → 4 options

        return (evenWays * oddWays) % mod;
    }
};

this above is correct code but let me see this again 
